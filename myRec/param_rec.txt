cmake file:
	systemcmds/param
	modules/param (null)
	modules/systemlib/param

rcS:
line82: param select $PARAM_FILE (/fs/microsd/params or /fs/mtd_params)
line83: param load
...     param reset
...     param compare SYS_AUTOSTART 0
...     param set
...     param reset_nostart RC*
...     param save

rc.mc_default:
...     param set ...

systemcmds/param/param.c:
param usage:
	load, import, show, set, compare, index, index_used, greater, select, save, reset

load -> do_load(const char *param_file_name) -> open file -> param_load -> param_reset_all -> param_import_internal ->
	bson_decoder_init_file(for init decoder !!!Incoming call back func <param_import_callback(...)>!!!) -> {tinyBSON} ->
	bson_decoder_next (!!!it will call the callback and pass its results back!!!) -> param_import_callback(use func <param_set_internal(...)> to save param (name & value))


save -> do_save(const char *param_file_name)

set -> find param id according to name -> select param type -> get val -> save

...

sensors.cpp:
param_find -> param_find_internal -> string compare :param_info_base -> px4_parameters(in px4_parameters.c)


BSON Description:
BSON, short for Bin­ary JSON, is a bin­ary-en­coded seri­al­iz­a­tion of JSON-like doc­u­ments.
Like JSON, BSON sup­ports the em­bed­ding of doc­u­ments and ar­rays with­in oth­er doc­u­ments and ar­rays.
BSON also con­tains ex­ten­sions that al­low rep­res­ent­a­tion of data types that are not part of the JSON spec.
For ex­ample, BSON has a Date type and a BinData type.

BSON can be com­pared to bin­ary inter­change for­mats, like Proto­col Buf­fers.
BSON is more "schema-less" than Proto­col Buf­fers, which can give it an ad­vant­age in flex­ib­il­ity 
but also a slight dis­ad­vant­age in space ef­fi­ciency (BSON has over­head for field names with­in the seri­al­ized data).

BSON was de­signed to have the fol­low­ing three char­ac­ter­ist­ics:
Lightweight:
    Keep­ing spa­tial over­head to a min­im­um is im­port­ant for any data rep­res­ent­a­tion format, es­pe­cially when used over the net­work.
Traversable:
    BSON is de­signed to be tra­versed eas­ily. This is a vi­tal prop­erty in its role as the primary data rep­res­ent­a­tion for Mon­goDB.
Efficient:
    En­cod­ing data to BSON and de­cod­ing from BSON can be per­formed very quickly in most lan­guages due to the use of C data types.